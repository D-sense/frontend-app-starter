{
  "_args": [
    [
      {
        "raw": "postcss-custom-selectors@^4.0.1",
        "scope": null,
        "escapedName": "postcss-custom-selectors",
        "name": "postcss-custom-selectors",
        "rawSpec": "^4.0.1",
        "spec": ">=4.0.1 <5.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss"
    ]
  ],
  "_from": "postcss-custom-selectors@>=4.0.1 <5.0.0",
  "_id": "postcss-custom-selectors@4.0.1",
  "_inCache": true,
  "_location": "/postcss-custom-selectors",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/postcss-custom-selectors-4.0.1.tgz_1494832192672_0.769993067951873"
  },
  "_npmUser": {
    "name": "semigradsky",
    "email": "semigradskyd@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5",
    "supports-color": "4.5.0"
  },
  "_requested": {
    "raw": "postcss-custom-selectors@^4.0.1",
    "scope": null,
    "escapedName": "postcss-custom-selectors",
    "name": "postcss-custom-selectors",
    "rawSpec": "^4.0.1",
    "spec": ">=4.0.1 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/precss"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-custom-selectors/-/postcss-custom-selectors-4.0.1.tgz",
  "_shasum": "781382f94c52e727ef5ca4776ea2adf49a611382",
  "_shrinkwrap": null,
  "_spec": "postcss-custom-selectors@^4.0.1",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss",
  "authors": [
    "yisi",
    "Maxime Thirouin"
  ],
  "bugs": {
    "url": "https://github.com/postcss/postcss-custom-selectors/issues"
  },
  "dependencies": {
    "postcss": "^6.0.1",
    "postcss-selector-matches": "^3.0.0"
  },
  "description": "PostCSS plugin to transform W3C CSS Extensions(Custom Selectors) to more compatible CSS",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-preset-env": "^1.4.0",
    "babel-register": "^6.24.1",
    "babel-tape-runner": "^1.1.0",
    "eslint": "^3.19.0",
    "tape": "^4.6.3"
  },
  "directories": {},
  "dist": {
    "shasum": "781382f94c52e727ef5ca4776ea2adf49a611382",
    "tarball": "https://registry.npmjs.org/postcss-custom-selectors/-/postcss-custom-selectors-4.0.1.tgz"
  },
  "files": [
    "dist",
    "README-zh.md"
  ],
  "gitHead": "cd71c8f150f939c3efb9c15849720c6afcf11648",
  "homepage": "https://github.com/postcss/postcss-custom-selectors#readme",
  "keywords": [
    "postcss",
    "postcss-plugin",
    "css",
    "selector",
    "custom-selector"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "jonathantneal",
      "email": "jonathantneal@hotmail.com"
    },
    {
      "name": "moox",
      "email": "m@moox.io"
    },
    {
      "name": "semigradsky",
      "email": "semigradskyd@gmail.com"
    },
    {
      "name": "yisi",
      "email": "yiorsi@gmail.com"
    }
  ],
  "name": "postcss-custom-selectors",
  "optionalDependencies": {},
  "readme": "# PostCSS Custom Selectors\r\n\r\n[![Build Status](https://travis-ci.org/postcss/postcss-custom-selectors.svg?branch=master)](https://travis-ci.org/postcss/postcss-custom-selectors)\r\n[![NPM Downloads](https://img.shields.io/npm/dm/postcss-custom-selectors.svg?style=flat)](https://www.npmjs.com/package/postcss-custom-selectors)\r\n[![NPM Version](http://img.shields.io/npm/v/postcss-custom-selectors.svg?style=flat)](https://www.npmjs.com/package/postcss-custom-selectors)\r\n[![License](https://img.shields.io/npm/l/postcss-custom-selectors.svg?style=flat)](http://opensource.org/licenses/MIT)\r\n\r\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform  [W3C CSS Extensions(Custom Selectors)](http://dev.w3.org/csswg/css-extensions/#custom-selectors)  to more compatible CSS.\r\n\r\n[简体中文](README-zh.md)\r\n\r\n![GIF Demo](http://gtms01.alicdn.com/tps/i1/TB1ZCe3GVXXXXbzXFXXRi48IXXX-780-610.gif)\r\n\r\n## Installation\r\n\r\n```console\r\n$ npm install postcss-custom-selectors\r\n```\r\n\r\n## Quick Start\r\n\r\n```js\r\n// dependencies\r\nvar fs = require('fs')\r\nvar postcss = require('postcss')\r\nvar selector = require('postcss-custom-selectors')\r\n\r\n// css to be processed\r\nvar css = fs.readFileSync('input.css', 'utf8')\r\n\r\n// process css using postcss-custom-selectors\r\nvar output = postcss()\r\n  .use(selector())\r\n  .process(css)\r\n  .css\r\n\r\nconsole.log('\\n====>Output CSS:\\n', output)  \r\n```\r\n\r\nOr just:\r\n\r\n```js\r\nvar output = postcss(selector())\r\n  .process(css)\r\n  .css\r\n```\r\n\r\ninput:\r\n\r\n```css\r\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\r\n\r\narticle :--heading + p {\r\n  margin-top: 0;\r\n}\r\n```\r\n\r\nYou will get:\r\n\r\n```css\r\narticle h1 + p,\r\narticle h2 + p,\r\narticle h3 + p,\r\narticle h4 + p,\r\narticle h5 + p,\r\narticle h6 + p {\r\n  margin-top: 0;\r\n}\r\n```\r\n\r\n## CSS syntax\r\n\r\n```css\r\n@custom-selector = @custom-selector :<extension-name> <selector>;\r\n```\r\n\r\n## How to use\r\n\r\nThe custom selector is a pseudo-class, so you must use `:--` to define it.\r\n\r\nFor example to simulate [:any-link](http://dev.w3.org/csswg/selectors/#the-any-link-pseudo) selector:\r\n\r\n```css\r\n@custom-selector :--any-link :link, :visited;\r\n\r\na:--any-link {\r\n  color: blue;\r\n}\r\n```\r\n\r\noutput:\r\n\r\n```css\r\na:link,\r\na:visited {\r\n  color: blue;\r\n}\r\n```\r\n\r\nYou can even make some smart use like this:\r\n\r\n```css\r\n@custom-selector :--button button, .button;\r\n@custom-selector :--enter :hover, :focus;\r\n\r\n:--button:--enter {\r\n\r\n}\r\n```\r\n\r\noutput\r\n\r\n```css\r\nbutton:hover,\r\n.button:hover,\r\nbutton:focus,\r\n.button:focus {\r\n\r\n}\r\n```\r\n\r\n## Options\r\n\r\n### `lineBreak`\r\n\r\n_(default: `true`)_\r\n\r\nSet whether  multiple selector wrap.The default is turning on to be a newline.\r\n\r\nClose the line breaks.\r\n\r\n```js\r\nvar options = {\r\n  lineBreak: false\r\n}\r\n\r\nvar output = postcss(selector(options))\r\n  .process(css)\r\n  .css\r\n```\r\n\r\nWith the first example, the output will be:\r\n\r\n```css\r\narticle h1 + p, article h2 + p, article h3 + p, article h4 + p, article h5 + p, article h6 + p {\r\n  margin-top: 0;\r\n}\r\n```\r\n\r\n### `extensions`\r\n\r\n_(default: `{}`)_\r\n\r\nThis option allows you to customize an object to set the `<extension-name>` (selector alias) and `<selector>`, these definitions will cover the same alias of `@custom-selector` in CSS.\r\n\r\n```js\r\nvar options = {\r\n  extensions: {\r\n    ':--any' : 'section, article, aside, nav'\r\n  }\r\n}\r\n\r\nvar output = postcss(selector(options))\r\n  .process(css)\r\n  .css;\r\n```\r\n\r\ninput.css\r\n\r\n```css\r\n@custom-selector :--any .foo, .bar; /* No effect */\r\n:--any h1 {\r\n  margin-top: 16px;\r\n}\r\n```\r\n\r\noutput:\r\n\r\n```css\r\n/* No effect */\r\nsection h1,\r\narticle h1,\r\naside h1,\r\nnav h1 {\r\n  margin-top: 16px;\r\n}\r\n```\r\n\r\n### `transformMatches`\r\n\r\n_(default: `true`)_\r\n\r\nAllows you to limit transformation to `:matches()` usage\r\nIf set to false:\r\n\r\ninput\r\n\r\n```css\r\n@custom-selector :--foo .bar, .baz;\r\n.foo:--foo {\r\n  margin-top: 16px;\r\n}\r\n```\r\n\r\noutput\r\n\r\n```css\r\n.foo:matches(.bar, .baz) {\r\n  margin-top: 16px;\r\n}\r\n```\r\n\r\n\r\n## Usage\r\n\r\n### Node Watch\r\n\r\nDependence [chokidar](https://github.com/paulmillr/chokidar) module.\r\n\r\n```js\r\nvar fs = require('fs')\r\nvar chokidar = require('chokidar')\r\nvar postcss = require('postcss')\r\nvar selector = require('postcss-custom-selectors')\r\n\r\nvar src = 'input.css'\r\n\r\nconsole.info('Watching…\\nModify the input.css and save.')\r\n\r\nchokidar.watch(src, {\r\n  ignored: /[\\/\\\\]\\./,\r\n  persistent: true\r\n}).on('all',\r\n  function(event, path, stats) {\r\n    var css = fs.readFileSync(src, 'utf8')\r\n    var output = postcss(selector())\r\n      .process(css)\r\n      .css\r\n    fs.writeFileSync('output.css', output)\r\n  })\r\n```\r\n\r\n### Grunt\r\n\r\n```js\r\nmodule.exports = function(grunt) {\r\n  grunt.initConfig({\r\n    pkg: grunt.file.readJSON('package.json'),\r\n    postcss: {\r\n      options: {\r\n        processors: [\r\n          require('autoprefixer-core')({ browsers: ['> 0%'] }).postcss, //Other plugin\r\n          require('postcss-custom-selectors')(),\r\n        ]\r\n      },\r\n      dist: {\r\n        src: ['src/*.css'],\r\n        dest: 'build/grunt.css'\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.loadNpmTasks('grunt-contrib-uglify');\r\n  grunt.loadNpmTasks('grunt-postcss');\r\n\r\n  grunt.registerTask('default', ['postcss']);\r\n}\r\n```\r\n\r\n### Gulp\r\n\r\n```js\r\nvar gulp = require('gulp');\r\nvar rename = require('gulp-rename');\r\nvar postcss = require('gulp-postcss');\r\nvar selector = require('postcss-custom-selectors')\r\nvar autoprefixer = require('autoprefixer-core')\r\n\r\ngulp.task('default', function () {\r\n    var processors = [\r\n        autoprefixer({ browsers: ['> 0%'] }), //Other plugin\r\n        selector()\r\n    ];\r\n    gulp.src('src/*.css')\r\n        .pipe(postcss(processors))\r\n        .pipe(rename('gulp.css'))\r\n        .pipe(gulp.dest('build'))\r\n});\r\ngulp.watch('src/*.css', ['default']);\r\n```\r\n\r\n## Contributing\r\n\r\n* Install the relevant dependent module.\r\n* Respect coding style（Install [EditorConfig](http://editorconfig.org/)）.\r\n* Add test cases in the [test](test) directory.\r\n* Run test.\r\n\r\n```console\r\n$ git clone https://github.com/postcss/postcss-custom-selectors.git\r\n$ git checkout -b patch\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\n## [Changelog](CHANGELOG.md)\r\n\r\n## [License](LICENSE)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-custom-selectors.git"
  },
  "scripts": {
    "babelify": "babel src --out-dir dist",
    "lint": "eslint *.js ./src/ ./test/",
    "prepublish": "npm run babelify",
    "tape": "tape -r babel-register test/*.js",
    "test": "npm run lint && npm run babelify && npm run tape"
  },
  "version": "4.0.1"
}
