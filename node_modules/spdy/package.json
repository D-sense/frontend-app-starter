{
  "_args": [
    [
      {
        "raw": "spdy@^3.4.1",
        "scope": null,
        "escapedName": "spdy",
        "name": "spdy",
        "rawSpec": "^3.4.1",
        "spec": ">=3.4.1 <4.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/webpack-dev-server"
    ]
  ],
  "_from": "spdy@>=3.4.1 <4.0.0",
  "_id": "spdy@3.4.7",
  "_inCache": true,
  "_location": "/spdy",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/spdy-3.4.7.tgz_1495504570791_0.5951773677952588"
  },
  "_npmUser": {
    "name": "daviddias",
    "email": "daviddias.p@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "spdy@^3.4.1",
    "scope": null,
    "escapedName": "spdy",
    "name": "spdy",
    "rawSpec": "^3.4.1",
    "spec": ">=3.4.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack-dev-server"
  ],
  "_resolved": "https://registry.npmjs.org/spdy/-/spdy-3.4.7.tgz",
  "_shasum": "42ff41ece5cc0f99a3a6c28aabb73f5c3b03acbc",
  "_shrinkwrap": null,
  "_spec": "spdy@^3.4.1",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/webpack-dev-server",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/spdy-http2/node-spdy/issues",
    "email": "node-spdy+bugs@indutny.com"
  },
  "contributors": [
    {
      "name": "Chris Storm",
      "email": "github@eeecooks.com"
    },
    {
      "name": "FranÃ§ois de Metz",
      "email": "francois@2metz.fr"
    },
    {
      "name": "Ilya Grigorik",
      "email": "ilya@igvita.com"
    },
    {
      "name": "Roberto Peon"
    },
    {
      "name": "Tatsuhiro Tsujikawa"
    },
    {
      "name": "Jesse Cravens",
      "email": "jesse.cravens@gmail.com"
    }
  ],
  "dependencies": {
    "debug": "^2.6.8",
    "handle-thing": "^1.2.5",
    "http-deceiver": "^1.2.7",
    "safe-buffer": "^5.0.1",
    "select-hose": "^2.0.0",
    "spdy-transport": "^2.0.18"
  },
  "description": "Implementation of the SPDY protocol on node.js.",
  "devDependencies": {
    "istanbul": "^0.4.5",
    "mocha": "^3.4.1",
    "pre-commit": "^1.2.2",
    "standard": "^10.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "42ff41ece5cc0f99a3a6c28aabb73f5c3b03acbc",
    "tarball": "https://registry.npmjs.org/spdy/-/spdy-3.4.7.tgz"
  },
  "engines": [
    "node >= 0.7.0"
  ],
  "gitHead": "a1d8ce4af3bc4af098e6dc77ffdaf5a79c1aaea2",
  "homepage": "https://github.com/indutny/node-spdy",
  "keywords": [
    "spdy"
  ],
  "license": "MIT",
  "main": "./lib/spdy",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "fedor.indutny",
      "email": "fedor.indutny@gmail.com"
    },
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "spdy",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# SPDY Server for node.js\n\n[![Build Status](https://travis-ci.org/spdy-http2/node-spdy.svg?branch=master)](http://travis-ci.org/spdy-http2/node-spdy)\n[![NPM version](https://badge.fury.io/js/spdy.svg)](http://badge.fury.io/js/spdy)\n[![dependencies Status](https://david-dm.org/spdy-http2/node-spdy/status.svg?style=flat-square)](https://david-dm.org/spdy-http2/node-spdy)\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg?style=flat-square)](http://standardjs.com/)\n[![Waffle](https://img.shields.io/badge/track-waffle-blue.svg?style=flat-square)](https://waffle.io/spdy-http2/node-spdy)\n\nWith this module you can create [HTTP2][0] / [SPDY][1] servers\nin node.js with natural http module interface and fallback to regular https\n(for browsers that don't support neither HTTP2, nor SPDY yet).\n\nThis module named `spdy` but it [provides](https://github.com/indutny/node-spdy/issues/269#issuecomment-239014184) support for both http/2 (h2) and spdy (2,3,3.1). Also, `spdy` is compatible with Express.\n\n## Usage\n\n### Examples\n\nServer:\n```javascript\nvar spdy = require('spdy'),\n    fs = require('fs');\n\nvar options = {\n  // Private key\n  key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),\n\n  // Fullchain file or cert file (prefer the former)\n  cert: fs.readFileSync(__dirname + '/keys/spdy-fullchain.pem'),\n\n  // **optional** SPDY-specific options\n  spdy: {\n    protocols: [ 'h2', 'spdy/3.1', ..., 'http/1.1' ],\n    plain: false,\n\n    // **optional**\n    // Parse first incoming X_FORWARDED_FOR frame and put it to the\n    // headers of every request.\n    // NOTE: Use with care! This should not be used without some proxy that\n    // will *always* send X_FORWARDED_FOR\n    'x-forwarded-for': true,\n\n    connection: {\n      windowSize: 1024 * 1024, // Server's window size\n\n      // **optional** if true - server will send 3.1 frames on 3.0 *plain* spdy\n      autoSpdy31: false\n    }\n  }\n};\n\nvar server = spdy.createServer(options, function(req, res) {\n  res.writeHead(200);\n  res.end('hello world!');\n});\n\nserver.listen(3000);\n```\n\nClient:\n```javascript\nvar spdy = require('spdy');\nvar https = require('https');\n\nvar agent = spdy.createAgent({\n  host: 'www.google.com',\n  port: 443,\n\n  // Optional SPDY options\n  spdy: {\n    plain: false,\n    ssl: true,\n\n    // **optional** send X_FORWARDED_FOR\n    'x-forwarded-for': '127.0.0.1'\n  }\n});\n\nhttps.get({\n  host: 'www.google.com',\n  agent: agent\n}, function(response) {\n  console.log('yikes');\n  // Here it goes like with any other node.js HTTP request\n  // ...\n  // And once we're done - we may close TCP connection to server\n  // NOTE: All non-closed requests will die!\n  agent.close();\n}).end();\n```\n\nPlease note that if you use a custom agent, by default all connection-level\nerrors will result in an uncaught exception. To handle these errors subscribe\nto the `error` event and re-emit the captured error:\n\n```javascript\nvar agent = spdy.createAgent({\n  host: 'www.google.com',\n  port: 443\n}).once('error', function (err) {\n  this.emit(err);\n});\n```\n\n#### Push streams\n\nIt is possible to initiate [PUSH_PROMISE][5] to send content to clients _before_\nthe client requests it.\n\n```javascript\nspdy.createServer(options, function(req, res) {\n  var stream = res.push('/main.js', {\n    status: 200, // optional\n    method: 'GET', // optional\n    request: {\n      accept: '*/*'\n    },\n    response: {\n      'content-type': 'application/javascript'\n    }\n  });\n  stream.on('error', function() {\n  });\n  stream.end('alert(\"hello from push stream!\");');\n\n  res.end('<script src=\"/main.js\"></script>');\n}).listen(3000);\n```\n\n[PUSH_PROMISE][5] may be sent using the `push()` method on the current response\nobject.  The signature of the `push()` method is:\n\n`.push('/some/relative/url', { request: {...}, response: {...} }, callback)`\n\nSecond argument contains headers for both PUSH_PROMISE and emulated response.\n`callback` will receive two arguments: `err` (if any error is happened) and a\n[Duplex][4] stream as the second argument.\n\nClient usage:\n```javascript\nvar agent = spdy.createAgent({ /* ... */ });\nvar req = http.get({\n  host: 'www.google.com',\n  agent: agent\n}, function(response) {\n});\nreq.on('push', function(stream) {\n  stream.on('error', function(err) {\n    // Handle error\n  });\n  // Read data from stream\n});\n```\n\nNOTE: You're responsible for the `stream` object once given it in `.push()`\ncallback or `push` event. Hence ignoring `error` event on it will result in\nuncaught exception and crash your program.\n\n#### Trailing headers\n\nServer usage:\n```javascript\nfunction (req, res) {\n  // Send trailing headers to client\n  res.addTrailers({ header1: 'value1', header2: 'value2' });\n\n  // On client's trailing headers\n  req.on('trailers', function(headers) {\n    // ...\n  });\n}\n```\n\nClient usage:\n```javascript\nvar req = http.request({ agent: spdyAgent, /* ... */ }).function (res) {\n  // On server's trailing headers\n  res.on('trailers', function(headers) {\n    // ...\n  });\n});\nreq.write('stuff');\nreq.addTrailers({ /* ... */ });\nreq.end();\n```\n\n#### Options\n\nAll options supported by [tls][2] work with node-spdy.\n\nAdditional options may be passed via `spdy` sub-object:\n\n* `plain` - if defined, server will ignore NPN and ALPN data and choose whether\n  to use spdy or plain http by looking at first data packet.\n* `ssl` - if `false` and `options.plain` is `true`, `http.Server` will be used\n  as a `base` class for created server.\n* `maxChunk` - if set and non-falsy, limits number of bytes sent in one DATA\n  chunk. Setting it to non-zero value is recommended if you care about\n  interleaving of outgoing data from multiple different streams.\n  (defaults to 8192)\n* `protocols` - list of NPN/ALPN protocols to use (default is:\n  `['h2','spdy/3.1', 'spdy/3', 'spdy/2','http/1.1', 'http/1.0']`)\n* `protocol` - use specific protocol if no NPN/ALPN ex In addition,\n* `maxStreams` - set \"[maximum concurrent streams][3]\" protocol option\n\n### API\n\nAPI is compatible with `http` and `https` module, but you can use another\nfunction as base class for SPDYServer.\n\n```javascript\nspdy.createServer(\n  [base class constructor, i.e. https.Server],\n  { /* keys and options */ }, // <- the only one required argument\n  [request listener]\n).listen([port], [host], [callback]);\n```\n\nRequest listener will receive two arguments: `request` and `response`. They're\nboth instances of `http`'s `IncomingMessage` and `OutgoingMessage`. But three\ncustom properties are added to both of them: `isSpdy`, `spdyVersion`. `isSpdy`\nis `true` when the request was processed using HTTP2/SPDY protocols, it is\n`false` in case of HTTP/1.1 fallback. `spdyVersion` is either of: `2`, `3`,\n`3.1`, or `4` (for HTTP2).\n\n\n#### Contributors\n\n* [Fedor Indutny](https://github.com/indutny)\n* [Chris Strom](https://github.com/eee-c)\n* [FranÃ§ois de Metz](https://github.com/francois2metz)\n* [Ilya Grigorik](https://github.com/igrigorik)\n* [Roberto Peon](https://github.com/grmocg)\n* [Tatsuhiro Tsujikawa](https://github.com/tatsuhiro-t)\n* [Jesse Cravens](https://github.com/jessecravens)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2015.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: https://http2.github.io/\n[1]: http://www.chromium.org/spdy\n[2]: http://nodejs.org/docs/latest/api/tls.html#tls.createServer\n[3]: https://httpwg.github.io/specs/rfc7540.html#SETTINGS_MAX_CONCURRENT_STREAMS\n[4]: https://iojs.org/api/stream.html#stream_class_stream_duplex\n[5]: https://httpwg.github.io/specs/rfc7540.html#PUSH_PROMISE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/indutny/node-spdy.git"
  },
  "scripts": {
    "coverage": "istanbul cover node_modules/.bin/_mocha -- --reporter=spec test/**/*-test.js",
    "lint": "standard",
    "test": "mocha --reporter=spec test/*-test.js"
  },
  "version": "3.4.7"
}
