{
  "_args": [
    [
      {
        "raw": "postcss-loader",
        "scope": null,
        "escapedName": "postcss-loader",
        "name": "postcss-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter"
    ]
  ],
  "_from": "postcss-loader@latest",
  "_id": "postcss-loader@2.0.9",
  "_inCache": true,
  "_location": "/postcss-loader",
  "_nodeVersion": "9.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-loader-2.0.9.tgz_1511505361117_0.03216784819960594"
  },
  "_npmUser": {
    "name": "michael-ciniawsky",
    "email": "michael.ciniawsky@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5",
    "supports-color": "4.5.0"
  },
  "_requested": {
    "raw": "postcss-loader",
    "scope": null,
    "escapedName": "postcss-loader",
    "name": "postcss-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-2.0.9.tgz",
  "_shasum": "001fdf7bfeeb159405ee61d1bb8e59b528dbd309",
  "_shrinkwrap": null,
  "_spec": "postcss-loader",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^1.1.0",
    "postcss": "^6.0.0",
    "postcss-load-config": "^1.2.0",
    "schema-utils": "^0.3.0"
  },
  "description": "PostCSS loader for webpack",
  "devDependencies": {
    "coveralls": "^2.0.0",
    "jest": "^21.0.0",
    "jsdoc-to-markdown": "^3.0.0",
    "memory-fs": "^0.4.0",
    "postcss-js": "^1.0.0",
    "standard": "^10.0.0",
    "standard-version": "^4.0.0",
    "sugarss": "^1.0.0",
    "webpack": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sgoXPtmgVT3aBAhU47Kig8oPF+mbXl8Unjvtz1Qj1q2D2EvSVJW2mKJNzxv5y/LvA9xWwuvdysvhc7Zn80UWWw==",
    "shasum": "001fdf7bfeeb159405ee61d1bb8e59b528dbd309",
    "tarball": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-2.0.9.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "files": [
    "lib"
  ],
  "gitHead": "b9c1add9a1c5abfebd58006965d278787ce28d4a",
  "homepage": "https://github.com/postcss/postcss-loader#readme",
  "jest": {
    "collectCoverageFrom": [
      "lib/*.js"
    ]
  },
  "keywords": [
    "css",
    "postcss",
    "postcss-runner",
    "webpack",
    "webpack-loader"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    }
  ],
  "name": "postcss-loader",
  "optionalDependencies": {},
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"180\" height=\"180\" hspace=\"10\"\n    alt=\"PostCSS Logo\"\n    src=\"http://postcss.github.io/postcss/logo.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" hspace=\"10\"\n      src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\n  </a>\n  <div align=\"center\">\n    <a href=\"https://evilmartians.com/?utm_source=postcss\">\n      <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n        alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\" vspace=\"10\">\n    </a>\n  </div>\n  <h1>PostCSS Loader</h1>\n  <p>Loader for <a href=\"http://webpack.js.org/\">webpack</a> to process CSS with <a href=\"http://postcss.org/\">PostCSS</a></p>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D postcss-loader\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### `Configuration`\n\n**postcss.config.js**\n```js\nmodule.exports = {\n  parser: 'sugarss',\n  plugins: {\n    'postcss-import': {},\n    'postcss-cssnext': {},\n    'cssnano': {}\n  }\n}\n```\n\nYou can read more about common PostCSS Config [here](https://github.com/michael-ciniawsky/postcss-load-config).\n\n### `Config Cascade`\n\nYou can use different `postcss.config.js` files in different directories.\nConfig lookup starts from `path.dirname(file)` and walks the file tree upwards until a config file is found.\n\n```\n|– components\n| |– component\n| | |– index.js\n| | |– index.png\n| | |– style.css (1)\n| | |– postcss.config.js (1)\n| |– component\n| | |– index.js\n| | |– image.png\n| | |– style.css (2)\n|\n|– postcss.config.js (1 && 2 (recommended))\n|– webpack.config.js\n|\n|– package.json\n```\n\nAfter setting up your `postcss.config.js`, add `postcss-loader` to your `webpack.config.js`. You can use it standalone or in conjunction with `css-loader` (recommended). Use it **after** `css-loader` and `style-loader`, but **before** other preprocessor loaders like e.g `sass|less|stylus-loader`, if you use any.\n\n**webpack.config.js**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'postcss-loader' ]\n      }\n    ]\n  }\n}\n```\n\n> ⚠️  When `postcss-loader` is used standalone (without `css-loader`) don't use `@import` in your CSS, since this can lead to quite bloated bundles\n\n**webpack.config.js (recommended)**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`exec`](#exec)|`{Boolean}`|`undefined`|Enable PostCSS Parser support in `CSS-in-JS`|\n|[`parser`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Parser|\n|[`syntax`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Syntax|\n|[`stringifier`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Stringifier|\n|[`config`](#config)|`{Object}`|`undefined`|Set `postcss.config.js` config path && `ctx`|\n|[`plugins`](#plugins)|`{Array\\|Function}`|`[]`|Set PostCSS Plugins|\n|[`sourceMap`](#sourceMap)|`{String\\|Boolean}`|`false`|Enable Source Maps|\n\n### `Exec`\n\nIf you use JS styles without the [`postcss-js`][postcss-js] parser, add the `exec` option.\n\n```js\n{\n  test: /\\.style.js$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { importLoaders: 1 } },\n    { loader: 'postcss-loader', options: { parser: 'sugarss', exec: true } }\n  ]\n}\n```\n\n### `Config`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`path`](#path)|`{String}`|`undefined`|PostCSS Config Path|\n|[`context`](#context)|`{Object}`|`undefined`|PostCSS Config Context|\n\n#### `Path`\n\nYou can manually specify the path to search for your config (`postcss.config.js`) with the `config.path` option. This is needed if you store your config  in a separate e.g `./config || ./.config` folder.\n\n> ⚠️  Otherwise it is **unnecessary** to set this option and is **not** recommended\n\n**webpack.config.js**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    config: {\n      path: 'path/to/postcss.config.js'\n    }\n  }\n}\n```\n\n#### `Context (ctx)`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|`env`|`{String}`|`'development'`|`process.env.NODE_ENV`|\n|`file`|`{Object}`|`loader.resourcePath`|`extname`, `dirname`, `basename`|\n|`options`|`{Object}`|`{}`|Options|\n\n`postcss-loader` exposes context `ctx` to the config file, making your `postcss.config.js` dynamic, so can use it to do some real magic ✨\n\n**postcss.config.js**\n```js\nmodule.exports = ({ file, options, env }) => ({\n  parser: file.extname === '.sss' ? 'sugarss' : false,\n  plugins: {\n    'postcss-import': { root: file.dirname },\n    'postcss-cssnext': options.cssnext ? options.cssnext : false,\n    'autoprefixer': env == 'production' ? options.autoprefixer : false,\n    'cssnano': env === 'production' ? options.cssnano : false\n  }\n})\n```\n\n**webpack.config.js**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    config: {\n      ctx: {\n        cssnext: {...options},\n        cssnano: {...options},\n        autoprefixer: {...options}\n      }\n    }\n  }\n}\n```\n\n### `Plugins`\n\n**webpack.config.js**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',\n    plugins: (loader) => [\n      require('postcss-import')({ root: loader.resourcePath }),\n      require('postcss-cssnext')(),\n      require('autoprefixer')(),\n      require('cssnano')()\n    ]\n  }\n}\n```\n\n> ⚠️  webpack requires an identifier (`ident`) in `options` when `{Function}/require` is used (Complex Options). The `ident` can be freely named as long as it is unique. It's recommended to name it (`ident: 'postcss'`)\n\n### `Syntaxes`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`parser`](#parser)|`{String\\|Function}`|`undefined`|Custom PostCSS Parser|\n|[`syntax`](#syntax)|`{String\\|Function}`|`undefined`|Custom PostCSS Syntax|\n|[`stringifier`](#stringifier)|`{String\\|Function}`|`undefined`|Custom PostCSS Stringifier|\n\n#### `Parser`\n\n**webpack.config.js**\n```js\n{\n  test: /\\.sss$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { parser: 'sugarss' } }\n  ]\n}\n```\n\n#### `Syntax`\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { syntax: 'sugarss' } }\n  ]\n}\n```\n\n#### `Stringifier`\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { stringifier: 'midas' } }\n  ]\n}\n```\n\n### `SourceMap`\n\nEnables source map support, `postcss-loader` will use the previous source map given by other loaders and update it accordingly, if no previous loader is applied before `postcss-loader`, the loader will generate a source map for you.\n\n> :warning: If a previous loader like e.g `sass-loader` is applied and it's `sourceMap` option is set, but the `sourceMap` option in `postcss-loader` is omitted, previous source maps will be discarded by `postcss-loader` **entirely**.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css/,\n  use: [\n    { loader: 'style-loader', options: { sourceMap: true } },\n    { loader: 'css-loader', options: { sourceMap: true } },\n    { loader: 'postcss-loader', options: { sourceMap: true } },\n    { loader: 'sass-loader', options: { sourceMap: true } }\n  ]\n}\n```\n\n#### `'inline'`\n\nYou can set the `sourceMap: 'inline'` option to inline the source map\nwithin the CSS directly as an annotation comment.\n\n**webpack.config.js**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    sourceMap: 'inline'\n  }\n}\n```\n\n```css\n.class { color: red; }\n\n/*# sourceMappingURL=data:application/json;base64, ... */\n```\n\n<h2 align=\"center\">Examples</h2>\n\n### `Stylelint`\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    'css-loader',\n    {\n      loader: 'postcss-loader',\n      options: {\n        ident: 'postcss',\n        plugins: [\n          require('postcss-import')(),\n          require('stylelint')(),\n          ...,\n        ]\n      }\n    }\n  ]\n}\n```\n\n### `CSS Modules`\n\nThis loader [cannot be used] with [CSS Modules] out of the box due\nto the way `css-loader` processes file imports. To make them work properly,\neither add the css-loader’s [`importLoaders`] option.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { modules: true, importLoaders: 1 } },\n    'postcss-loader'\n  ]\n}\n```\n\nor use [postcss-modules] instead of `css-loader`.\n\n[`importLoaders`]: https://github.com/webpack-contrib/css-loader#importloaders\n[cannot be used]: https://github.com/webpack/css-loader/issues/137\n[CSS Modules]: https://github.com/webpack/css-loader#css-modules\n[postcss-modules]: https://github.com/outpunk/postcss-modules\n\n### `CSS-in-JS`\n\nIf you want to process styles written in JavaScript, use the [postcss-js] parser.\n\n[postcss-js]: https://github.com/postcss/postcss-js\n\n```js\n{\n  test: /\\.style.js$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { importLoaders: 2 } },\n    { loader: 'postcss-loader', options: { parser: 'postcss-js' } },\n    'babel-loader'\n  ]\n}\n```\n\nAs result you will be able to write styles in the following way\n\n```js\nimport colors from './styles/colors'\n\nexport default {\n    '.menu': {\n      color: colors.main,\n      height: 25,\n      '&_link': {\n      color: 'white'\n    }\n  }\n}\n```\n\n> :warning: If you are using Babel you need to do the following in order for the setup to work\n\n> 1. Add [babel-plugin-add-module-exports] to your configuration\n> 2. You need to have only one **default** export per style module\n\n[babel-plugin-add-module-exports]: https://github.com/59naga/babel-plugin-add-module-exports\n\n### [Extract CSS][ExtractPlugin]\n\n[ExtractPlugin]: https://github.com/webpack-contrib/extract-text-webpack-plugin\n\n**webpack.config.js**\n```js\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            { loader: 'css-loader', options: { importLoaders: 1 } },\n            'postcss-loader'\n          ]\n        })\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin('[name].css')\n  ]\n}\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/michael-ciniawsky\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\n          </br>\n          Michael Ciniawsky\n        </a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/evilebottnawi\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/evilebottnawi.png?v=3&s=150\">\n          </br>\n          Alexander Krasnoyarov\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/postcss-loader.svg\n[npm-url]: https://npmjs.com/package/postcss-loader\n\n[node]: https://img.shields.io/node/v/postcss-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/postcss/postcss-loader.svg\n[deps-url]: https://david-dm.org/postcss/postcss-loader\n\n[tests]: http://img.shields.io/travis/postcss/postcss-loader.svg\n[tests-url]: https://travis-ci.org/postcss/postcss-loader\n\n[cover]: https://coveralls.io/repos/github/postcss/postcss-loader/badge.svg\n[cover-url]: https://coveralls.io/github/postcss/postcss-loader\n\n[chat]: https://badges.gitter.im/postcss/postcss.svg\n[chat-url]: https://gitter.im/postcss/postcss\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-loader.git"
  },
  "scripts": {
    "clean": "rm -rf dmd jest* coverage jsdoc-api test/results",
    "docs": "jsdoc2md lib/index.js > LOADER.md",
    "lint": "standard",
    "postdocs": "npm run clean",
    "pretest": "npm run clean",
    "release": "standard-version",
    "test": "jest --verbose --coverage"
  },
  "standard": {
    "env": {
      "jest": true
    },
    "ignore": [
      "*.test.js"
    ]
  },
  "version": "2.0.9"
}
