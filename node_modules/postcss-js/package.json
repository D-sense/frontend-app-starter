{
  "_args": [
    [
      {
        "raw": "postcss-js@^1.0.1",
        "scope": null,
        "escapedName": "postcss-js",
        "name": "postcss-js",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-mixins"
    ]
  ],
  "_from": "postcss-js@>=1.0.1 <2.0.0",
  "_id": "postcss-js@1.0.1",
  "_inCache": true,
  "_location": "/postcss-js",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-js-1.0.1.tgz_1505282710813_0.798162859166041"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "postcss-js@^1.0.1",
    "scope": null,
    "escapedName": "postcss-js",
    "name": "postcss-js",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-mixins"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-1.0.1.tgz",
  "_shasum": "ffaf29226e399ea74b5dce02cab1729d7addbc7b",
  "_shrinkwrap": null,
  "_spec": "postcss-js@^1.0.1",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-mixins",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-js/issues"
  },
  "dependencies": {
    "camelcase-css": "^1.0.1",
    "postcss": "^6.0.11"
  },
  "description": "PostCSS for React Inline Styles, Radium, Free Style and other CSS-in-JS",
  "devDependencies": {
    "eslint": "^4.6.1",
    "eslint-config-postcss": "^2.0.2",
    "jest": "^21.0.2",
    "lint-staged": "^4.1.3",
    "pre-commit": "^1.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-smhUUMF5o5W1ZCQSyh5A3lNOXFLdNrxqyhWbLsGolZH2AgVmlyhxhYbIixfsdKE6r1vG5i7O40DPcvEvE1mvjw==",
    "shasum": "ffaf29226e399ea74b5dce02cab1729d7addbc7b",
    "tarball": "https://registry.npmjs.org/postcss-js/-/postcss-js-1.0.1.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-postcss/es5",
    "rules": {
      "no-use-before-define": "off",
      "quote-props": "off"
    },
    "env": {
      "jest": true
    }
  },
  "gitHead": "dea1e865dad643e34c4a8d5f449812a3d2f79066",
  "homepage": "https://github.com/postcss/postcss-js#readme",
  "jest": {
    "coverageThreshold": {
      "global": {
        "statements": 100
      }
    }
  },
  "keywords": [
    "postcss",
    "postcss-runner",
    "js",
    "inline",
    "react",
    "css",
    "cssinjs"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": "eslint"
  },
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "postcss-js",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "readme": "# PostCSS JS [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] for React Inline Styles, Radium, JSS and other CSS-in-JS.\n\nFor example, to use [Stylelint], [RTLCSS] or [postcss-write-svg] plugins\nin your workflow.\n\n[postcss-write-svg]: https://github.com/jonathantneal/postcss-write-svg\n[Stylelint]:         https://github.com/stylelint/stylelint\n[PostCSS]:           https://github.com/postcss/postcss\n[RTLCSS]:            https://github.com/MohammadYounes/rtlcss\n[ci-img]:            https://travis-ci.org/postcss/postcss-js.svg\n[ci]:                https://travis-ci.org/postcss/postcss-js\n\n## Usage\n\n### Processing\n\n```js\nlet prefixer = postcssJs.sync([ autoprefixer ]);\n\nlet style = prefixer({\n    display: 'flex'\n});\n\nstyle //=> { display: ['-webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'] }\n```\n\n### Compile CSS-in-JS to CSS\n\n```js\nlet style = {\n    top: 10,\n    '&:hover': {\n        top: 5\n    }\n};\n\npostcss().process(style, { parser: postcssJs }).then( (result) => {\n    result.css //=> top: 10px;\n               //   &:hover { top: 5px; }\n})\n```\n\n### Compile CSS to CSS-in-JS\n\n```js\nlet css  = '@media screen { z-index: 1 }'\nlet root = postcss.parse(css);\n\npostcssJs.objectify(root) //=> { '@media screen': { zIndex: '1' } }\n```\n\n## API\n\n### `sync(plugins): function`\n\nCreate PostCSS processor with simple API, but with only sync PostCSS plugins\nsupport.\n\nProcessor is just a function, which takes one style object and return other.\n\n### `async(plugins): function`\n\nSame as `sync`, but also support async plugins.\n\nReturned processor will return Promise.\n\n### `parse(obj): Root`\n\nParse CSS-in-JS style object to PostCSS `Root` instance.\n\nIt converts numbers to pixels and parses\n[Free Style] like selectors and at-rules:\n\n```js\n{\n    '@media screen': {\n        '&:hover': {\n            top: 10\n        }\n    }\n}\n```\n\nThis methods use Custom Syntax name convention, so you can use it like this:\n\n```js\npostcss().process(obj, { parser: postcssJs })\n```\n\n### `objectify(root): object`\n\nConvert PostCSS `Root` instance to CSS-in-JS style object.\n\n## Troubleshoot\n\nWebpack may need some extra config for some PostCSS plugins.\n\n### `Module parse failed`\n\nAutoprefixer and some other plugins\nneed a [json-loader](https://github.com/webpack/json-loader) to import data.\n\nSo, please install this loader and add to webpack config:\n\n```js\nloaders: [\n    {\n        test: /\\.json$/,\n        loader: \"json-loader\"\n    }\n]\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-js.git"
  },
  "scripts": {
    "lint-staged": "lint-staged",
    "test": "jest --coverage && eslint *.js test/*.js"
  },
  "version": "1.0.1"
}
