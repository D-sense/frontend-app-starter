{
  "_args": [
    [
      {
        "raw": "postcss-color-function@^4.0.0",
        "scope": null,
        "escapedName": "postcss-color-function",
        "name": "postcss-color-function",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss"
    ]
  ],
  "_from": "postcss-color-function@>=4.0.0 <5.0.0",
  "_id": "postcss-color-function@4.0.1",
  "_inCache": true,
  "_location": "/postcss-color-function",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-color-function-4.0.1.tgz_1509703808230_0.502085832413286"
  },
  "_npmUser": {
    "name": "semigradsky",
    "email": "semigradskyd@gmail.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "postcss-color-function@^4.0.0",
    "scope": null,
    "escapedName": "postcss-color-function",
    "name": "postcss-color-function",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/precss"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-color-function/-/postcss-color-function-4.0.1.tgz",
  "_shasum": "402b3f2cebc3f6947e618fb6be3654fbecef6444",
  "_shrinkwrap": null,
  "_spec": "postcss-color-function@^4.0.0",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss",
  "author": {
    "name": "Maxime Thirouin"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-color-function/issues"
  },
  "dependencies": {
    "css-color-function": "~1.3.3",
    "postcss": "^6.0.1",
    "postcss-message-helpers": "^2.0.0",
    "postcss-value-parser": "^3.3.0"
  },
  "description": "PostCSS plugin to transform W3C CSS color function to more compatible CSS.",
  "devDependencies": {
    "eslint": "^3.19.0",
    "npmpub": "^3.1.0",
    "tape": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "402b3f2cebc3f6947e618fb6be3654fbecef6444",
    "tarball": "https://registry.npmjs.org/postcss-color-function/-/postcss-color-function-4.0.1.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "ca0891f86554877eb1263716c881c387e5fb691d",
  "homepage": "https://github.com/postcss/postcss-color-function#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "color",
    "colour",
    "function"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jonathantneal",
      "email": "jonathantneal@hotmail.com"
    },
    {
      "name": "moox",
      "email": "m@moox.io"
    },
    {
      "name": "semigradsky",
      "email": "semigradskyd@gmail.com"
    }
  ],
  "name": "postcss-color-function",
  "optionalDependencies": {},
  "readme": "# postcss-color-function [![CSS Standard Status](https://jonathantneal.github.io/css-db/badge/css-color-modifying-colors.svg)](https://jonathantneal.github.io/css-db/#css-color-modifying-colors) [![Build Status](https://travis-ci.org/postcss/postcss-color-function.svg)](https://travis-ci.org/postcss/postcss-color-function)\r\n\r\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform [W3C CSS color function][specs] to more compatible CSS.\r\n\r\n## Installation\r\n\r\n```console\r\n$ npm install postcss-color-function\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\n// dependencies\r\nvar fs = require(\"fs\")\r\nvar postcss = require(\"postcss\")\r\nvar colorFunction = require(\"postcss-color-function\")\r\n\r\n// css to be processed\r\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\r\n\r\n// process css\r\nvar output = postcss()\r\n  .use(colorFunction())\r\n  .process(css)\r\n  .css\r\n```\r\n\r\nUsing this `input.css`:\r\n\r\n```css\r\nbody {\r\n  background: color(red a(90%))\r\n}\r\n\r\n```\r\n\r\nyou will get:\r\n\r\n```css\r\nbody {\r\n  background: rgba(255, 0, 0, 0.9)\r\n}\r\n```\r\n\r\nCheckout [tests](test) for examples.\r\n\r\n## Interface (according to CSS specs)\r\n\r\n```\r\ncolor( [ <color> | <hue> ] <color-adjuster>* )\r\n```\r\n\r\n### List of `color-adjuster`\r\n\r\n- `[red( | green( | blue( | alpha( | a(] ['+' | '-']? [<number> | <percentage>] )`\r\n- `[red( | green( | blue( | alpha( | a(] '*' <percentage> )`\r\n- ~~`rgb( ['+' | '-'] [<number> | <percentage>]{3} )`~~ @todo\r\n- ~~`rgb( ['+' | '-'] <hash-token> )`~~ @todo\r\n- ~~`rgb( '*' <percentage> ) |`~~ @todo\r\n- `[hue( | h(] ['+' | '-' | '*']? <angle> )`\r\n- `[saturation( | s(] ['+' | '-' | '*']? <percentage> )`\r\n- `[lightness( | l(] ['+' | '-' | '*']? <percentage> )`\r\n- `[whiteness( | w(] ['+' | '-' | '*']? <percentage> )`\r\n- `[blackness( | b(] ['+' | '-' | '*']? <percentage> )`\r\n- `tint( <percentage> )`\r\n- `shade( <percentage> )`\r\n- `blend( <color> <percentage> [rgb | hsl | hwb]? )`\r\n- ~~`blenda( <color> <percentage> [rgb | hsl | hwb]? )`~~ @todo\r\n- `contrast( <percentage>? )`\r\n\r\nNotes:\r\n\r\n- some adjusts have shortcuts,\r\n- can be used on every value on any property,\r\n- some values can use add/subtract/scale modifiers or a direct value.\r\n\r\n[Read the specs][specs] for more information.\r\n\r\n### Examples\r\n\r\n```css\r\nwhatever {\r\n  color: color(red a(10%));\r\n\r\n  background-color: color(red lightness(50%)); /* == color(red l(50%)); */\r\n\r\n  border-color: color(hsla(125, 50%, 50%, .4) saturation(+ 10%) w(- 20%));\r\n}\r\n```\r\n\r\n## FAQ\r\n\r\n### Can you support `currentcolor` so we can do `color(currentcolor adjuster())`?\r\n\r\nNo we cannot do that. `currentcolor` depends on the cascade (so the DOM) and we can't handle that in a simple preprocessing step. You need to handle that with polyfills.\r\n\r\n### Can we use CSS custom properties so we can do `color(var(--mainColor) adjuster())`?\r\n\r\nBy using [postcss-custom-properties](https://github.com/postcss/postcss-custom-properties) before this plugin, you can do that (sort of).\r\nYou have some examples in [cssnext playground](http://cssnext.io/playground/).\r\n\r\n## Notes for former Sass users\r\n\r\n`lighten` and `darken` are Sass specific methods and not supported by native CSS specs. The same functionality can be achieved with the [tint and shade adjusters](https://drafts.csswg.org/css-color/#tint-shade-adjusters):\r\n\r\n```css\r\n$lighten(red, 20%)\r\n/*  is equivalent to */\r\ncolor(red tint(20%))\r\n\r\n$darken(red, 20%)\r\n/*  is equivalent to */\r\ncolor(red shade(20%))\r\n```\r\n\r\n---\r\n\r\n## [Changelog](CHANGELOG.md)\r\n\r\n## [License](LICENSE)\r\n\r\n[specs]: http://dev.w3.org/csswg/css-color/#modifying-colors\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-color-function.git"
  },
  "scripts": {
    "lint": "eslint *.js index.js ./test/",
    "release": "npmpub",
    "test": "npm run lint && tape test"
  },
  "version": "4.0.1"
}
