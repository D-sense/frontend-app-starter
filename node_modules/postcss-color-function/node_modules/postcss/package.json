{
  "_args": [
    [
      {
        "raw": "postcss@^6.0.3",
        "scope": null,
        "escapedName": "postcss",
        "name": "postcss",
        "rawSpec": "^6.0.3",
        "spec": ">=6.0.3 <7.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss"
    ],
    [
      {
        "raw": "postcss@^6.0.1",
        "scope": null,
        "escapedName": "postcss",
        "name": "postcss",
        "rawSpec": "^6.0.1",
        "spec": ">=6.0.1 <7.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-color-function"
    ]
  ],
  "_from": "postcss@^6.0.1",
  "_id": "postcss@6.0.14",
  "_inCache": true,
  "_location": "/postcss-color-function/postcss",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-6.0.14.tgz_1509630679150_0.5046457324642688"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss@^6.0.1",
    "scope": null,
    "escapedName": "postcss",
    "name": "postcss",
    "rawSpec": "^6.0.1",
    "spec": ">=6.0.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-color-function"
  ],
  "_resolved": "https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz",
  "_shasum": "5534c72114739e75d0afcf017db853099f562885",
  "_shrinkwrap": null,
  "_spec": "postcss@^6.0.1",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-color-function",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "browser": {
    "supports-color": false,
    "chalk": false,
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss/issues"
  },
  "dependencies": {
    "chalk": "^2.3.0",
    "source-map": "^0.6.1",
    "supports-color": "^4.4.0"
  },
  "description": "Tool for transforming styles with JS plugins",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-precompile-charcodes": "^1.1.0",
    "babel-preset-env": "^1.6.1",
    "concat-with-sourcemaps": "^1.0.4",
    "del": "^3.0.0",
    "docdash": "^0.4.0",
    "eslint": "^4.10.0",
    "eslint-config-postcss": "^2.0.2",
    "fs-extra": "^4.0.2",
    "gulp": "^3.9.1",
    "gulp-babel": "^7.0.0",
    "gulp-changed": "^3.1.1",
    "gulp-eslint": "^4.0.0",
    "gulp-jest": "^2.0.0",
    "gulp-run": "^1.7.1",
    "gulp-sourcemaps": "^2.6.1",
    "jest": "^21.2.1",
    "jsdoc": "^3.5.5",
    "lint-staged": "^4.3.0",
    "postcss-parser-tests": "^6.1.0",
    "pre-commit": "^1.2.2",
    "run-sequence": "^2.2.0",
    "size-limit": "^0.12.1",
    "strip-ansi": "^4.0.0",
    "yaspeller-ci": "^0.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-NJ1z0f+1offCgadPhz+DvGm5Mkci+mmV5BqD13S992o0Xk9eElxUfPPF+t2ksH5R/17gz4xVK8KWocUQ5o3Rog==",
    "shasum": "5534c72114739e75d0afcf017db853099f562885",
    "tarball": "https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": "eslint-config-postcss",
    "rules": {
      "consistent-return": "off",
      "valid-jsdoc": "error",
      "complexity": "off",
      "no-new": "off"
    },
    "env": {
      "browser": true,
      "jest": true
    }
  },
  "homepage": "http://postcss.org/",
  "jest": {
    "modulePathIgnorePatterns": [
      "build"
    ]
  },
  "keywords": [
    "css",
    "postcss",
    "rework",
    "preprocessor",
    "parser",
    "source map",
    "transform",
    "manipulation",
    "transpiler"
  ],
  "license": "MIT",
  "lint-staged": {
    "test/*.js": "eslint",
    "lib/*.es6": "eslint",
    "*.md": "yaspeller-ci"
  },
  "main": "lib/postcss",
  "maintainers": [
    {
      "name": "trysound",
      "email": "trysound@yandex.ru"
    },
    {
      "name": "beneb",
      "email": "beneb.info@gmail.com"
    },
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "postcss",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "readme": "# PostCSS [![Travis Build Status][travis-img]][travis] [![AppVeyor Build Status][appveyor-img]][appveyor] [![Gitter][chat-img]][chat]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     alt=\"哲学家的石头 - PostCSS 的 logo\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[appveyor-img]: https://img.shields.io/appveyor/ci/ai/postcss.svg?label=windows\n[travis-img]:   https://img.shields.io/travis/postcss/postcss.svg?label=unix\n[chat-img]:     https://img.shields.io/badge/Gitter-Join_the_PostCSS_chat-brightgreen.svg\n[appveyor]:     https://ci.appveyor.com/project/ai/postcss\n[travis]:       https://travis-ci.org/postcss/postcss\n[chat]:         https://gitter.im/postcss/postcss\n\nPostCSS 是一个允许使用 JS 插件转换样式的工具。\n这些插件可以检查（lint）你的 CSS，支持 CSS Variables 和 Mixins，\n编译尚未被浏览器广泛支持的先进的 CSS 语法，内联图片，以及其它很多优秀的功能。\n\nPostCSS 在工业界被广泛地应用，其中不乏很多有名的行业领导者，如：维基百科，Twitter，阿里巴巴，\nJetBrains。PostCSS 的 [Autoprefixer] 插件是最流行的 CSS 处理工具之一。\n\n**Twitter 账号:** [@postcss](https://twitter.com/postcss)。<br>\n**支持 / 讨论:**   [Gitter](https://gitter.im/postcss/postcss)。<br>\n\n如果需要 PostCSS 商业支持（如咨询，提升公司的前端文化，\nPostCSS 插件），请联系 [Evil Martians](https://evilmartians.com/?utm_source=postcss)\n邮箱 <surrender@evilmartians.com>。\n\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"由 Evil Martians 赞助\" width=\"236\" height=\"54\">\n</a>\n\n## 插件\n\n截止到目前，PostCSS 有 200 多个插件。你可以在 [插件列表] 或 [搜索目录] 找到它们。\n下方的列表是我们最喜欢的插件 - 它们很好地演示了我们可以用 PostCSS 做些什么。\n\n如果你有任何新的想法，[开发 PostCSS 插件] 非常简单易上手。\n\n[搜索目录]: http://postcss.parts\n[插件列表]: https://github.com/postcss/postcss/blob/master/docs/plugins.md\n\n### 解决全局 CSS 的问题\n\n* [`postcss-use`] 允许你在 CSS 里明确地设置 PostCSS 插件，并且只在当前文件执行它们。\n* [`postcss-modules`] 和 [`react-css-modules`] 可以自动以组件为单位隔绝 CSS 选择器。\n* [`postcss-autoreset`] 是全局样式重置的又一个选择，它更适用于分离的组件。\n* [`postcss-initial`] 添加了 `all: initial` 的支持，重置了所有继承的样式。\n* [`cq-prolyfill`] 添加了容器查询的支持，允许添加响应于父元素宽度的样式.\n\n### 提前使用先进的 CSS 特性\n\n* [`autoprefixer`] 添加了 vendor 浏览器前缀，它使用 Can I Use 上面的数据。\n* [`postcss-cssnext`] 允许你使用未来的 CSS 特性（包括 `autoprefixer`）。\n* [`postcss-image-set-polyfill`] 为所有浏览器模拟了 [`image-set`] 函数逻辑。\n\n### 更佳的 CSS 可读性\n\n* [`precss`] 囊括了许多插件来支持类似 Sass 的特性，比如 CSS 变量，套嵌，mixins 等。\n* [`postcss-sorting`] 给规则的内容以及@规则排序。\n* [`postcss-utilities`] 囊括了最常用的简写方式和书写帮助。\n* [`short`] 添加并拓展了大量的缩写属性。\n\n### 图片和字体\n\n* [`postcss-assets`] 可以插入图片尺寸和内联文件。\n* [`postcss-sprites`] 能生成雪碧图。\n* [`font-magician`] 生成所有在 CSS 里需要的 `@font-face` 规则。\n* [`postcss-inline-svg`] 允许你内联 SVG 并定制它的样式。\n* [`postcss-write-svg`] 允许你在 CSS 里写简单的 SVG。\n\n### 提示器（Linters）\n\n* [`stylelint`] 是一个模块化的样式提示器。\n* [`stylefmt`] 是一个能根据 `stylelint` 规则自动优化 CSS 格式的工具。\n* [`doiuse`] 提示 CSS 的浏览器支持性，使用的数据来自于 Can I Use。\n* [`colorguard`] 帮助你保持一个始终如一的调色板。\n\n### 其它\n\n* [`postcss-rtl`] 在单个 CSS 文件里组合了两个方向（左到右，右到左）的样式。\n* [`cssnano`] 是一个模块化的 CSS 压缩器。\n* [`lost`] 是一个功能强大的 `calc()` 栅格系统。\n* [`rtlcss`] 镜像翻转 CSS 样式，适用于 right-to-left 的应用场景。\n\n[`postcss-image-set-polyfill`]: https://github.com/SuperOl3g/postcss-image-set-polyfill\n[`postcss-inline-svg`]:         https://github.com/TrySound/postcss-inline-svg\n[`react-css-modules`]:          https://github.com/gajus/react-css-modules\n[`postcss-autoreset`]:          https://github.com/maximkoretskiy/postcss-autoreset\n[`postcss-write-svg`]:          https://github.com/jonathantneal/postcss-write-svg\n[`postcss-utilities`]:          https://github.com/ismamz/postcss-utilities\n[`postcss-initial`]:            https://github.com/maximkoretskiy/postcss-initial\n[`postcss-sprites`]:            https://github.com/2createStudio/postcss-sprites\n[`postcss-modules`]:            https://github.com/outpunk/postcss-modules\n[`postcss-sorting`]:            https://github.com/hudochenkov/postcss-sorting\n[`postcss-cssnext`]:            http://cssnext.io\n[`postcss-assets`]:             https://github.com/assetsjs/postcss-assets\n[开发 PostCSS 插件]:             https://github.com/postcss/postcss/blob/master/docs/writing-a-plugin.md\n[`font-magician`]:              https://github.com/jonathantneal/postcss-font-magician\n[`autoprefixer`]:               https://github.com/postcss/autoprefixer\n[`cq-prolyfill`]:               https://github.com/ausi/cq-prolyfill\n[`postcss-rtl`]:                https://github.com/vkalinichev/postcss-rtl\n[`postcss-use`]:                https://github.com/postcss/postcss-use\n[`css-modules`]:                https://github.com/css-modules/css-modules\n[`colorguard`]:                 https://github.com/SlexAxton/css-colorguard\n[`stylelint`]:                  https://github.com/stylelint/stylelint\n[`image-set`]:                  https://drafts.csswg.org/css-images-4/#image-set-notation\n[`stylefmt`]:                   https://github.com/morishitter/stylefmt\n[`cssnano`]:                    http://cssnano.co\n[`precss`]:                     https://github.com/jonathantneal/precss\n[`doiuse`]:                     https://github.com/anandthakker/doiuse\n[`rtlcss`]:                     https://github.com/MohammadYounes/rtlcss\n[`short`]:                      https://github.com/jonathantneal/postcss-short\n[`lost`]:                       https://github.com/peterramsing/lost\n\n## 语法\n\nPostCSS 可以转化样式到任意语法，不仅仅是 CSS。\n如果还没有支持你最喜欢的语法，你可以编写一个解释器以及（或者）一个 stringifier 来拓展 PostCSS。\n\n* [`sugarss`] 是一个以缩进为基础的语法，类似于 Sass 和 Stylus。\n* [`postcss-html`] 允许你在 HTML / [Markdown](https://daringfireball.net/projects/markdown/syntax) / [Vue component](https://vue-loader.vuejs.org/) 里编写样式。\n* [`postcss-scss`] 允许你使用 SCSS *(但并没有将 SCSS 编译到 CSS)*。\n* [`postcss-sass`] 允许你使用 Sass *(但并没有将 Sass 编译到 CSS)*。\n* [`postcss-less`] 允许你使用 Less *(但并没有将 LESS 编译到 CSS)*。\n* [`postcss-less-engine`] 允许你使用 Less *(并且使用真正的 Less.js 把 LESS 编译到 CSS)*。\n* [`postcss-js`] 允许你在 JS 里编写样式，或者转换成 React 的内联样式／Radium／JSS。\n* [`postcss-safe-parser`] 查找并修复 CSS 语法错误。\n* [`midas`] 将 CSS 字符串转化成高亮的 HTML。\n\n[`postcss-less-engine`]: https://github.com/Crunch/postcss-less\n[`postcss-safe-parser`]: https://github.com/postcss/postcss-safe-parser\n[`postcss-html`]:        https://github.com/gucong3000/postcss-html\n[`postcss-scss`]:        https://github.com/postcss/postcss-scss\n[`postcss-sass`]:        https://github.com/AleshaOleg/postcss-sass\n[`postcss-less`]:        https://github.com/webschik/postcss-less\n[`postcss-js`]:          https://github.com/postcss/postcss-js\n[`sugarss`]:             https://github.com/postcss/sugarss\n[`midas`]:               https://github.com/ben-eb/midas\n\n## 文章\n\n* [一些你对 PostCSS 可能产生的误解](http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong)\n* [PostCSS 究竟是什么，是做什么的](http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss)\n* [PostCSS 指南](http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889)\n\n你可以在 [awesome-postcss](https://github.com/jjaderg/awesome-postcss) 列表里找到更多优秀的文章和视频。\n\n## 书籍\n\n* Alex Libby, Packt 的 [网页设计之精通 PostCSS](https://www.packtpub.com/web-development/mastering-postcss-web-design) (2016年6月)\n\n## 使用方法\n\n你可以通过简单的两步便开始使用 PostCSS：\n\n1. 在你的构建工具中查找并添加 PostCSS 拓展。\n2. [选择插件]并将它们添加到你的 PostCSS 处理队列中。\n\n[选择插件]: http://postcss.parts\n\n### Webpack\n\n在 `webpack.config.js` 里使用 [`postcss-loader`] :\n\n```js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                use: [\n                    {\n                        loader: 'style-loader',\n                    },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            importLoaders: 1,\n                        }\n                    },\n                    {\n                        loader: 'postcss-loader'\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n然后创建 `postcss.config.js`:\n\n```js\nmodule.exports = {\n    plugins: [\n        require('precss'),\n        require('autoprefixer')\n    ]\n}\n```\n\n[`postcss-loader`]: https://github.com/postcss/postcss-loader\n\n### Gulp\n\n使用 [`gulp-postcss`] 和 [`gulp-sourcemaps`].\n\n```js\ngulp.task('css', function () {\n    var postcss    = require('gulp-postcss');\n    var sourcemaps = require('gulp-sourcemaps');\n\n    return gulp.src('src/**/*.css')\n        .pipe( sourcemaps.init() )\n        .pipe( postcss([ require('precss'), require('autoprefixer') ]) )\n        .pipe( sourcemaps.write('.') )\n        .pipe( gulp.dest('build/') );\n});\n```\n\n[`gulp-sourcemaps`]: https://github.com/floridoo/gulp-sourcemaps\n[`gulp-postcss`]:    https://github.com/postcss/gulp-postcss\n\n### npm run / CLI\n\n如果需要在你的命令行界面或 npm 脚本里使用 PostCSS，你可以使用 [`postcss-cli`]。\n\n```sh\npostcss --use autoprefixer -c options.json -o main.css css/*.css\n```\n\n[`postcss-cli`]: https://github.com/postcss/postcss-cli\n\n### 浏览器\n\n如果你想编译浏览器里的 CSS 字符串（例如像 CodePen 一样的在线编辑器），\n只需使用 [Browserify] 或  [webpack]。它们会把 PostCSS 和插件文件打包进一个独立文件。\n\n如果想要在 React 内联样式／JSS／Radium／其它 [CSS-in-JS] 里使用 PostCSS，\n你可以用 [`postcss-js`] 然后转换样式对象。\n\n```js\nvar postcss  = require('postcss-js');\nvar prefixer = postcss.sync([ require('autoprefixer') ]);\n\nprefixer({ display: 'flex' }); //=> { display: ['-webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'] }\n```\n\n[`postcss-js`]: https://github.com/postcss/postcss-js\n[Browserify]:   http://browserify.org/\n[CSS-in-JS]:    https://github.com/MicheleBertoli/css-in-js\n[webpack]:      https://webpack.github.io/\n\n### 运行器\n\n* **Grunt**: [`grunt-postcss`](https://github.com/nDmitry/grunt-postcss)\n* **HTML**: [`posthtml-postcss`](https://github.com/posthtml/posthtml-postcss)\n* **Stylus**: [`poststylus`](https://github.com/seaneking/poststylus)\n* **Rollup**: [`rollup-plugin-postcss`](https://github.com/egoist/rollup-plugin-postcss)\n* **Brunch**: [`postcss-brunch`](https://github.com/brunch/postcss-brunch)\n* **Broccoli**: [`broccoli-postcss`](https://github.com/jeffjewiss/broccoli-postcss)\n* **Meteor**: [`postcss`](https://atmospherejs.com/juliancwirko/postcss)\n* **ENB**: [`enb-postcss`](https://github.com/awinogradov/enb-postcss)\n* **Taskr**: [`taskr-postcss`](https://github.com/lukeed/taskr/tree/master/packages/postcss)\n* **Start**: [`start-postcss`](https://github.com/start-runner/postcss)\n* **Connect/Express**: [`postcss-middleware`](https://github.com/jedmao/postcss-middleware)\n\n### JS API\n\n对于其它的应用环境，你可以使用 JS API：\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst precss = require('precss');\nconst autoprefixer = require('autoprefixer');\n\nfs.readFile('src/app.css', (err, css) => {\n    postcss([precss, autoprefixer])\n        .process(css, { from: 'src/app.css', to: 'dest/app.css' })\n        .then(result => {\n            fs.writeFile('dest/app.css', result.css);\n            if ( result.map ) fs.writeFile('dest/app.css.map', result.map);\n        });\n});\n```\n\n阅读 [PostCSS API 文档] 获取更多有关 JS API 的信息.\n\n所有的 PostCSS 运行器应当通过 [PostCSS 运行器指南]。\n\n[PostCSS 运行器指南]: https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md\n[PostCSS API 文档]:  http://api.postcss.org/postcss.html\n\n### 配置选项\n\n绝大多数 PostCSS 运行器接受两个参数：\n\n* 一个包含所需插件的数组\n* 一个配置选项的对象\n\n常见的选项：\n\n* `syntax`: 一个提供了语法解释器和 stringifier 的对象。\n* `parser`: 一个特殊的语法解释器（例如 [SCSS]）。\n* `stringifier`: 一个特殊的语法 output 生成器（例如 [Midas]）。\n* `map`: [source map 选项].\n* `from`: input 文件名称（大多数运行器自动设置了这个）。\n* `to`: output 文件名称（大多数运行器自动设置了这个）。\n\n[source map 选项]: https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n[Midas]:          https://github.com/ben-eb/midas\n[SCSS]:           https://github.com/postcss/postcss-scss\n\n### Atom\n\n* [`language-postcss`] 添加了 PostCSS 和 [SugarSS] 代码高亮。\n* [`source-preview-postcss`] 在一个独立窗口里实时预览生成的 CSS。\n\n[SugarSS]: https://github.com/postcss/sugarss\n\n### Sublime Text\n\n* [`Syntax-highlighting-for-PostCSS`] 添加了 PostCSS 代码高亮。\n\n[`Syntax-highlighting-for-PostCSS`]: https://github.com/hudochenkov/Syntax-highlighting-for-PostCSS\n[`source-preview-postcss`]:          https://atom.io/packages/source-preview-postcss\n[`language-postcss`]:                https://atom.io/packages/language-postcss\n\n### Vim\n\n* [`postcss.vim`] 添加了 PostCSS 代码高亮。\n\n[`postcss.vim`]: https://github.com/stephenway/postcss.vim\n\n### WebStorm\n\n自 WebStorm 2016.3 开始，[提供了] 内建的 PostCSS 支持。\n\n[提供了]: https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/\n",
  "readmeFilename": "README.cn.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss.git"
  },
  "scripts": {
    "lint-staged": "lint-staged",
    "test": "gulp"
  },
  "size-limit": [
    {
      "path": "lib/postcss.js",
      "limit": "29 KB"
    }
  ],
  "types": "lib/postcss.d.ts",
  "version": "6.0.14"
}
