{
  "_args": [
    [
      {
        "raw": "postcss-mixins@^6.0.1",
        "scope": null,
        "escapedName": "postcss-mixins",
        "name": "postcss-mixins",
        "rawSpec": "^6.0.1",
        "spec": ">=6.0.1 <7.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss"
    ]
  ],
  "_from": "postcss-mixins@>=6.0.1 <7.0.0",
  "_id": "postcss-mixins@6.2.0",
  "_inCache": true,
  "_location": "/postcss-mixins",
  "_nodeVersion": "8.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-mixins-6.2.0.tgz_1508694515692_0.4049789924174547"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "postcss-mixins@^6.0.1",
    "scope": null,
    "escapedName": "postcss-mixins",
    "name": "postcss-mixins",
    "rawSpec": "^6.0.1",
    "spec": ">=6.0.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/precss"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-mixins/-/postcss-mixins-6.2.0.tgz",
  "_shasum": "fa9d2c2166b2ae7745956c727ab9dd2de4b96a40",
  "_shrinkwrap": null,
  "_spec": "postcss-mixins@^6.0.1",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/precss",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-mixins/issues"
  },
  "dependencies": {
    "globby": "^6.1.0",
    "postcss": "^6.0.13",
    "postcss-js": "^1.0.1",
    "postcss-simple-vars": "^4.1.0",
    "sugarss": "^1.0.0"
  },
  "description": "PostCSS plugin for mixins",
  "devDependencies": {
    "eslint": "^4.9.0",
    "eslint-config-postcss": "^2.0.2",
    "jest": "^21.2.1",
    "lint-staged": "^4.3.0",
    "pre-commit": "^1.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1lR6vY7JqIlFKPwVQUhx4ozVZjn1B6nY+O1avH3aX9ek8vFFxxcxewqsjN6QhWKfj/03OxcGpNi6/7pgfwbcPw==",
    "shasum": "fa9d2c2166b2ae7745956c727ab9dd2de4b96a40",
    "tarball": "https://registry.npmjs.org/postcss-mixins/-/postcss-mixins-6.2.0.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-postcss/es5",
    "rules": {
      "consistent-return": "off"
    },
    "env": {
      "jest": true
    }
  },
  "gitHead": "0e825ef6c0fde57dccf2d923a817f3d3d2e35364",
  "homepage": "https://github.com/postcss/postcss-mixins#readme",
  "jest": {
    "coverageThreshold": {
      "global": {
        "statements": 100
      }
    }
  },
  "keywords": [
    "postcss",
    "css",
    "postcss-plugin",
    "mixins",
    "sass"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": "eslint"
  },
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "postcss-mixins",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "readme": "# PostCSS Mixins [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"135\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo-leftp.svg\">\n\n[PostCSS] plugin for mixins.\n\nNote, that you must set this plugin before [postcss-simple-vars]\nand [postcss-nested].\n\n```css\n@define-mixin icon $network, $color: blue {\n    .icon.is-$(network) {\n        color: $color;\n        @mixin-content;\n    }\n    .icon.is-$(network):hover {\n        color: white;\n        background: $color;\n    }\n}\n\n@mixin icon twitter {\n    background: url(twt.png);\n}\n@mixin icon youtube, red {\n    background: url(youtube.png);\n}\n```\n\n```css\n.icon.is-twitter {\n    color: blue;\n    background: url(twt.png);\n}\n.icon.is-twitter:hover {\n    color: white;\n    background: blue;\n}\n.icon.is-youtube {\n    color: red;\n    background: url(youtube.png);\n}\n.icon.is-youtube:hover {\n    color: white;\n    background: red;\n}\n```\n\n[postcss-utilities] collection is better for `clearfix` and other popular hacks.\nFor simple cases you can use [postcss-define-property].\n\n[postcss-define-property]: https://github.com/daleeidd/postcss-define-property\n[postcss-utilities]:       https://github.com/ismamz/postcss-utilities\n[postcss-simple-vars]:     https://github.com/postcss/postcss-simple-vars\n[postcss-nested]:          https://github.com/postcss/postcss-nested\n[PostCSS]:                 https://github.com/postcss/postcss\n[ci-img]:                  https://travis-ci.org/postcss/postcss-mixins.svg\n[ci]:                      https://travis-ci.org/postcss/postcss-mixins\n\n## Usage\n\n```js\npostcss([ require('postcss-mixins') ])\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n## Mixins\n\n### Migration from Sass\n\nIf you need to use Sass and PostCSS mixins together\n(for example, while migration), you could use `@add-mixin`,\ninstead of `@mixin`. Just put PostCSS after Sass.\n\n```sass\n// Legacy SCSS\n@mixin old {\n    …\n}\n@include old;\n\n// New code\n@define-mixin new {\n    …\n}\n@add-mixin new;\n```\n\n\n### CSS Mixin\n\nSimple template defined directly in CSS to prevent repeating yourself.\n\nSee [postcss-simple-vars] docs for arguments syntax.\n\nYou can use it with [postcss-nested] plugin:\n\n```css\n@define-mixin icon $name {\n    padding-left: 16px;\n    &::after {\n        content: \"\";\n        background-url: url(/icons/$(name).png);\n    }\n}\n\n.search {\n    @mixin icon search;\n}\n```\n\nUnlike Sass, PostCSS has no `if` or `while` statements. If you need some\ncomplicated logic, you should use function mixin.\n\n[postcss-nested]:      https://github.com/postcss/postcss-nested\n[postcss-simple-vars]: https://github.com/postcss/postcss-simple-vars\n\n### Function Mixin\n\nThis type of mixin gives you full power of JavaScript.\nYou can define this mixins in `mixins` option.\n\nThis type is ideal for CSS hacks or business logic.\n\nAlso you should use function mixin if you need to change property names\nin mixin, because [postcss-simple-vars] doesn’t support variables\nin properties yet.\n\nFirst argument will be `@mixin` node, that called this mixin.\nYou can insert your declarations or rule before or after this node.\nOther arguments will be taken from at-rule parameters.\n\nSee [PostCSS API] about nodes API.\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        icons: function (mixin, dir) {\n            fs.readdirSync('/images/' + dir).forEach(function (file) {\n                var icon = file.replace(/\\.svg$/, '');\n                var rule = postcss.rule('.icon.icon-' + icon);\n                rule.append({\n                    prop:  'background',\n                    value: 'url(' + dir + '/' + file + ')'\n                });\n                mixin.replaceWith(rule);\n            });\n        }\n    }\n});\n```\n\n```css\n@mixin icons signin;\n```\n\n```css\n.icon.icon-back { background: url(signin/back.svg) }\n.icon.icon-secret { background: url(signin/secret.svg) }\n```\n\nYou can also return an object if you don’t want to create each node manually:\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        image: function (mixin, path) {\n            return {\n                '&': {\n                    background: 'url(' + path + ')'\n                },\n                '@media (min-resolution: 120dpi)': {\n                    '&': {\n                        background: 'url(' + path + '@2x)'\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nMixin body will be in `mixin.nodes`:\n\n```\nvar postcss = require('postcss');\n\nrequire('postcss-mixins')({\n    mixins: {\n        hover: function (mixin) {\n            let rule = postcss.rule({ selector: '&:hover', '&.hover' });\n            rule.append(mixin.nodes);\n            mixin.replaceWith(rule);\n        }\n    }\n}\n```\n\nOr you can use object instead of function:\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        clearfix: {\n            '&::after': {\n                content: '\"\"',\n                display: 'table',\n                clear: 'both'\n            }\n        }\n    }\n}\n```\n\n[PostCSS API]: https://github.com/postcss/postcss/blob/master/docs/api.md\n\n## Options\n\nCall plugin function to set options:\n\n```js\npostcss([ require('postcss-mixins')({ mixins: { … } }) ])\n```\n\n### `mixins`\n\nType: `Object`\n\nObject of function mixins.\n\n### `mixinsDir`\n\nType: `string|string[]`\n\nAutoload all mixins from one or more dirs. Mixin name will be taken from file\nname.\n\n```js\n// gulpfile.js\n\nrequire('postcss-mixins')({\n    mixinsDir: path.join(__dirname, 'mixins')\n})\n\n// mixins/clearfix.js\n\nmodule.exports = {\n    '&::after': {\n        content: '\"\"',\n        display: 'table',\n        clear: 'both'\n    }\n}\n\n// mixins/size.pcss\n\n@define-mixin size $size {\n    width: $size;\n    height: $size;\n}\n\n// mixins/circle.sss\n\n@define-mixin circle $size\n  border-radius: 50%\n  width: $size\n  height: $size\n```\n\n### `mixinsFiles`\n\nType: `string|string[]`\n\nSimilar to [`mixinsDir`](#mixinsdir); except, you can provide\n[glob](https://github.com/isaacs/node-glob) syntax to target or not target\nspecific files.\n\n```js\nrequire('postcss-mixins')({\n    mixinsFiles: path.join(__dirname, 'mixins', '!(*.spec.js)')\n})\n```\n\n### `silent`\n\nRemove unknown mixins and do not throw a error. Default is `false`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-mixins.git"
  },
  "scripts": {
    "lint-staged": "lint-staged",
    "test": "jest --coverage && eslint *.js test/{**/,}*.js"
  },
  "version": "6.2.0"
}
