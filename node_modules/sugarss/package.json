{
  "_args": [
    [
      {
        "raw": "sugarss@^1.0.0",
        "scope": null,
        "escapedName": "sugarss",
        "name": "sugarss",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-mixins"
    ]
  ],
  "_from": "sugarss@>=1.0.0 <2.0.0",
  "_id": "sugarss@1.0.1",
  "_inCache": true,
  "_location": "/sugarss",
  "_nodeVersion": "9.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sugarss-1.0.1.tgz_1509907406533_0.5031481094192713"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "sugarss@^1.0.0",
    "scope": null,
    "escapedName": "sugarss",
    "name": "sugarss",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-mixins"
  ],
  "_resolved": "https://registry.npmjs.org/sugarss/-/sugarss-1.0.1.tgz",
  "_shasum": "be826d9003e0f247735f92365dc3fd7f1bae9e44",
  "_shrinkwrap": null,
  "_spec": "sugarss@^1.0.0",
  "_where": "/Users/Oluwashola/webToolsProjects/frontend-starter/node_modules/postcss-mixins",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "babel": {
    "presets": [
      [
        "env",
        {
          "targets": {
            "browsers": "last 1 version",
            "node": 4
          },
          "loose": true
        }
      ],
      "stage-0"
    ],
    "plugins": [
      "add-module-exports",
      "precompile-charcodes"
    ]
  },
  "bugs": {
    "url": "https://github.com/postcss/sugarss/issues"
  },
  "dependencies": {
    "postcss": "^6.0.14"
  },
  "description": "Indent-based CSS syntax for PostCSS",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-precompile-charcodes": "^1.1.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-stage-0": "^6.24.1",
    "eslint": "^4.10.0",
    "eslint-config-postcss": "^2.0.2",
    "jest": "^21.2.1",
    "lint-staged": "^4.3.0",
    "postcss-parser-tests": "^6.1.0",
    "pre-commit": "^1.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3qgLZytikQQEVn1/FrhY7B68gPUUGY3R1Q1vTiD5xT+Ti1DP/8iZuwFet9ONs5+bmL8pZoDQ6JrQHVgrNlK6mA==",
    "shasum": "be826d9003e0f247735f92365dc3fd7f1bae9e44",
    "tarball": "https://registry.npmjs.org/sugarss/-/sugarss-1.0.1.tgz"
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": "eslint-config-postcss",
    "rules": {
      "key-spacing": [
        "error",
        {
          "align": "value"
        }
      ],
      "complexity": "off"
    },
    "env": {
      "jest": true
    }
  },
  "gitHead": "a5fcc84ed0bae3e257a0f1ce0a6c5360c699b634",
  "homepage": "https://github.com/postcss/sugarss#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-syntax",
    "syntax",
    "indent",
    "parser"
  ],
  "license": "MIT",
  "lint-staged": {
    "test/*.js": "eslint",
    "*.es6": "eslint"
  },
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "sugarss",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "readme": "# SugarSS [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"120\" height=\"155\"\n     title=\"SugarSS logo by Maria Keller\"\n     src=\"http://postcss.github.io/sugarss/logo.svg\">\n\nIndent-based CSS syntax for [PostCSS].\n\n```sass\na\n  color: blue\n\n.multiline,\n.selector\n  box-shadow: 1px 0 9px rgba(0, 0, 0, .4),\n              1px 0 3px rgba(0, 0, 0, .6)\n\n// Mobile\n@media (max-width: 400px)\n  .body\n    padding: 0 10px\n```\n\nAs any PostCSS custom syntax, SugarSS has source map, [stylelint]\nand [postcss-sorting] support out-of-box.\n\nIt was designed to be used with [PreCSS] and [postcss-nested-props].\nBut you can use it with any PostCSS plugins\nor use it without any PostCSS plugins.\nWith [gulp-sass-to-postcss-mixins] you can use `+mixin` syntax as in Sass.\n\n<a href=\"https://evilmartians.com/?utm_source=sugarss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[gulp-sass-to-postcss-mixins]:  https://github.com/akella/gulp-sass-to-postcss-mixins\n[postcss-nested-props]:        https://github.com/jedmao/postcss-nested-props\n[postcss-sorting]:             https://github.com/hudochenkov/postcss-sorting\n[stylelint]:                   http://stylelint.io/\n[PostCSS]:                     https://github.com/postcss/postcss\n[PreCSS]:                      https://github.com/jonathantneal/precss\n[ci-img]:                      https://img.shields.io/travis/postcss/sugarss.svg\n[ci]:                          https://travis-ci.org/postcss/sugarss\n\n## Syntax\n\nSugarSS MIME-type is `text/x-sugarss` with `.sss` file extension.\n\n### Indent\n\nWe recommend 2 spaces indent. However, SugarSS autodetects indent\nand can be used with tabs or spaces.\n\nBut it is prohibited to mix spaces and tabs in SugarSS sources.\n\n### Multiline\n\nSugarSS was designed to have intuitively multiline selectors and declaration\nvalues.\n\nThere are 3 rules for any types of nodes:\n\n```sass\n// 1. New line inside brackets will be ignored\n@supports ( (display: flex) and\n            (display: grid) )\n\n// 2. Comma at the end of the line\n@media (max-width: 400px),\n       (max-height: 800px)\n\n// 3. Backslash before new line\n@media screen and \\\n       (min-width: 600px)\n```\n\nIn selector you can put a new line anywhere. Just keep same indent\nfor every line of selector:\n\n```sass\n.parent >\n.child\n  color: black\n```\n\nIn declaration value you can put new line anywhere. Just keep bigger indent\nfor value:\n\n```sass\n.one\n  background: linear-gradient(rgba(0, 0, 0, 0), black)\n              linear-gradient(red, rgba(255, 0, 0, 0))\n\n.two\n  background:\n    linear-gradient(rgba(0, 0, 0, 0), black)\n    linear-gradient(red, rgba(255, 0, 0, 0))\n```\n\n### Comments\n\nSugarSS supports two types of comments:\n\n```sass\n/*\n Multiline comments\n */\n\n// Inline comments\n```\n\nThere is no “silent” comments in SugarSS. Output CSS will contain all comments\nfrom `.sss` source. But you can use [postcss-discard-comments]\nfor Sass’s silent/loud comments behaviour.\n\n[postcss-discard-comments]: https://www.npmjs.com/package/postcss-discard-comments\n\n### Rule and Declarations\n\nSugarSS separates selectors and declarations by `:\\s` or `:\\n` token.\n\nSo you must write a space after property name: `color: black` is good,\n`color:black` is prohibited.\n\n## Text Editors\n\n* SublimeText: [Syntax Highlighting for .SSS SugarSS]\n* Atom: [language-postcss], [source-preview-postcss] and [build-sugarss]\n* Vim: [vim-sugarss]\n\nWe are working on syntax highlight support in text editors.\n\nRight now, you can set `Sass` or `Stylus` syntax highlight for `.sss` files.\n\n[Syntax Highlighting for .SSS SugarSS]: https://packagecontrol.io/packages/Syntax%20Highlighting%20for%20SSS%20SugarSS\n[source-preview-postcss]:          https://atom.io/packages/source-preview-postcss\n[language-postcss]:                https://atom.io/packages/language-postcss\n[build-sugarss]:                   https://atom.io/packages/build-sugarss\n[vim-sugarss]:                     https://github.com/hhsnopek/vim-sugarss\n\n## Usage\n\nInstall SugarSS via npm:\n\n```sh\nnpm install sugarss --save-dev\n```\n\n### SugarSS to CSS\n\nJust set SugarSS to PostCSS `parser` option and PostCSS will compile\nSugarSS to CSS.\n\n[Gulp](https://github.com/postcss/gulp-postcss):\n\n```js\nvar sugarss = require('sugarss');\nvar postcss = require('gulp-postcss');\nvar rename  = require('gulp-rename');\n\ngulp.task('style', function () {\n    return gulp.src('src/**/*.sss')\n        .pipe(postcss(plugins, { parser: sugarss }))\n        .pipe(rename({ extname: '.css' }))\n        .pipe(gulp.dest('build'));\n});\n```\n\n[Webpack](https://github.com/postcss/postcss-loader):\n\n```js\nmodule: {\n    loaders: [\n        {\n            test:   /\\.sss/,\n            loader: \"style-loader!css-loader!postcss-loader?parser=sugarss\"\n        }\n    ]\n}\n```\n\n[CLI](https://github.com/postcss/postcss-cli):\n\n```\npostcss -u autoprefixer -p sugarss test.sss -o test.css\n```\n\n### SugarSS to SugarSS\n\nSometimes we use PostCSS not to build CSS, but to fix source file.\nFor example, to sort properties by [postcss-sorting].\n\nFor this cases, use `syntax` option, instead of `parser`:\n\n```js\ngulp.task('sort', function () {\n    return gulp.src('src/**/*.sss')\n        .pipe(postcss([sorting], { syntax: sugarss }))\n        .pipe(gulp.dest('src'));\n});\n```\n\n[postcss-sorting]: https://github.com/hudochenkov/postcss-sorting\n\n### CSS to SugarSS\n\nYou can even compile existed CSS sources to SugarSS syntax.\nJust use `stringifier` option instead of `parser`:\n\n```js\npostcss().process(css, { stringifier: sugarss }).then(function (result) {\n    result.content // Converted SugarSS content\n});\n```\n\n### Imports\n\n[postcss-import] doesn’t support `.sss` file extension, because this plugin\nimplements W3C specification. If you want smarter `@import`, you should\nuse [postcss-easy-import] with `extensions` option.\n\n```js\nvar postcssPlugin = [\n  easyImport({ extensions: ['.sss'] })\n]\n```\n\n[postcss-easy-import]: https://github.com/TrySound/postcss-easy-import\n[postcss-import]:      https://github.com/postcss/postcss-import\n\n## Thanks\n\nCute project logo was made by [Maria Keller](http://www.mariakellerac.com/).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/sugarss.git"
  },
  "scripts": {
    "build": "npm run clean && babel -s inline -d ./ *.es6",
    "clean": "rm *.js || echo 'Already cleaned'",
    "lint": "eslint *.es6 test/*.js",
    "lint-staged": "lint-staged",
    "prepack": "npm run build",
    "test": "npm run build && jest && npm run lint"
  },
  "version": "1.0.1"
}
